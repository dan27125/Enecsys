// ********************************************************************************************************
//	Enecsys Gen 1 Micro Inverter Firmware 
//
//	MIT License
//
//  	Copyright 2016-2024 Daniel G. Ambrose
//
//	Daniel G. Ambrose
//	12614 Bradford Woods Dr
//	Sunset Hills, Missouri, USA 63127
//	Email: dan27125@gmail.com
//	Facetime: dambrose@amcominc.net
//	Mobile:   3145044858
//	Whatsapp: 3145044858
//
// 	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//	associated documentation files (the "Software"), to deal in the Software without restriction, 
//	including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
//	and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
//	subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in all copies or substantial 
//	portions of the Software.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.
//
// ********************************************************************************************************

Build_Instructions: INVERTER APP for PIC24FJ64GA004

Greetings from St Louis(Sunset Hills) Missouri, USA.  I am Dan Ambrose.  Software Engineer and Father of (5) children. 
I grew up in the 1980s and had a passion for electronics, ham radio, RF, digital electronics and computers.  
I have ALWAYS had a passion for SOFTWARE AND HARDWARE. I spent a great deal of time developing software for 
the Enecsys Gen 1 hardware a/k/a PV Key 904.  This open source software represents many years of work.
Give a man a fish and he has food for the day.  Teach a man how to fish and he has food for life.
I'm providing this software in source code format with an MIT license to teach people how to develop
a mission critical multi tasking app without an RTOS that is interrupt driven (ADC,SPI,USART,Timer,PWM) 
with circular/FIFO buffers, state machines so the high level apps run without any blocking waiting for a resource.  

There are three (3) variations of the gen 1 motherboard. This project file has a drop down box that lets you choose 
which version / project you are developing.

Bootloader_240_60	OTA inverter app for the 4 capacitor 240 motherboard for 60/120 cell panels
Bootloader_360_72	OTA inverter app for the 6 capacitor 360 motherboard for 60,72,120,140 cell panels 
Bootloader_480_72	OTA inverter app for the 7 capacitor 480 DUO motherboard, 2 buck MOSFETs, for two solar panels.

* Install tools

  MPLAB X IDE v6.15		https://www.microchip.com/en-us/tools-resources/develop/mplab-x-ide	
				https://www.microchip.com/en-us/tools-resources/archives/mplab-ecosystem

  XC16 V2.10 			https://www.microchip.com/en-us/tools-resources/develop/mplab-xc-compilers/xc16

  DFP pack 1.9.336 		Installed from MPLAB

Steps to follow: 

Step (1) Download and install MPLAB X IDE v6.15

Step (2) Download and install XC16 V2.10 

Step (3) Download and install IGS Monitoring Software
	http://www.enecsysparts.com/	IGS Monitoring Software
	IGS Windows Install download	http://www.enecsysparts.com/IG-download2.htm

Step (4) Run MPLAB X, from top dropdown, choose Bootloader_360_72

Step (5) Verify the installation of DFP pack, Tool chain

DFP pack - 1.9.336 for XC16 PIC24F-GA-GB_DFP. 

Step (5A) - Open up the Project Properties - Bootloader_360_72
On left expand Conf: [ Bootloader_360_72 ]

Step (5B) - On right look for Packs:  Make sure this DFP pack is installed:
DFP pack 1.9.336 for XC16 PIC24F-GA-GB_DFP.  

Step (5C) - Next, On right look for Compiler toolchain Packs:  Make sure XC16 (v2.10) is installed and set as default

Step (5D) - Next, click on "Building" set verify the hex file name and version number version 
On Right side you will see Execute this line after build 
cp ${ImagePath}  Bootloader_360_72_V3_xx.hex

{ Where xx is a version number }  Edit/change the file name with xx to something else like

Bootloader_360_72_Beta_V3_xx.hex  so the resulting hex file will have a unique name that is not the same as
production tested firmware.  

Step (5E) - Next set / verify the compiler optimization options.  On left expand XC16 and then click 
xc16-gcc.  On top right look for  Option categories: Set drop down to "Optimizations" 

For this inverter app set "Optimization" to 

- 1 - Optimize. Optimizing compilation takes 
Click OK to save changes


*************************************************************************
Warning about compiler optimization for the inverter app vs bootloader  
*************************************************************************

Step (6) - Read and heed this Warning about compiler optimization for the inverter app vs bootloader  

For the inverter app Only use level 1 optimization.  Do not Optimize any higher then that.  You will gain nothing.  
It will not reduce the flash memory usage by much and could likely lead to inverter fault.  There are so many ISRs running that optimization 
leads to trouble. Allot of time was spent reducing the source code down so there is room in flash memory to
 and have plenty  Again, Do not use anything but - 1 - Optimize level 1

The only exception is the bootloader (which is a different app then the inverter).  The bootloader does not use ANY ISRs.  
Therefor it runs in polling mode and can be compressed into the smallest foot print. Experts on the microchip forum highly advised that the bootloader NOT use any ISRs
(because its writing to flash memory) therefore the bootloader is the only part that needs high Optimization. 

It is a fact new compiler releases often can break or introduce a bug for a certain chip or family but 
not cause a problem for others.  This hardware can get destroyed if the software malfunctions therefore
only use - 1 - Optimize. Optimizing compilation 
******************************************************************

Step (7) - From production menu - click on clean and build project.  The Bootloader_360_72 app should compile with no errors 
Look in the folder .\dist\Bootloader_360_72\production
You should see the output hex file: Bootloader_360_72_V3_xx.hex


Step (8) - Learn and understand that the inverter app does not EVER get flashed directly with a pickit3. It gets 
installed using a windows bootloader app called IGS with a USB zigbee radio.  Here is a youtube video link that shows how to do that 

https://www.youtube.com/watch?v=7VltmY9MUDU&t=18s



************** FLASH MEMORY IMPORTANT NOTE ************** 

Please note the PIC24FJ64GA004 chip only has 32k of 16 bit flash memory.   While the data sheet says 64k of flash memory 
it is stored/compressed in 16 bit words so that each 16 bit word of flash memory has two separate CPU mnemonic 
instructions.  

************** FLASH MEMORY IMPORTANT NOTE ************** 


It is perfectly safe and normal to OTA bootload the inverter with AC mains connected and/or while inverter is running
I did this on a test bench thousands of times while developing this firmware.  On a fast computer this high speed bootloader 
and IGS windows takes an average of about only 20-30 seconds to bootload the hex file.  

There is a primitive telnet like interface called the P24 engineering console that is used for standard I/O, 
debugging and sending commands OTA. There is an ASCII command parser that scans for multiple command line arguments
and then passes them to other modules with custom functions to modify parameters.  This was necessary for development.  
Debug, profiling etc. There are also debug and debug profiling features that have conditional compile options

This pic24 firmware has  two apps, only one of them can run at a time.
Use engineering console commands to set desired mode 

DIAG UFB   (Enables DIAGNOSTIC app and saves this DIAG mode in flash memory)
STOP       (Disables all (both) apps saves this stop mode in flash memory)
RUN        (Enables INVERTER app and saves this INVERTER mode in flash memory)

If you type STOP the inverter will never EVER run again unless type run.  

The DIAG app is used for motherboard repair. It puts the H-bridge in diagnostic mode, which slowly, 
once per second alternates each side of the UFB.  You make an LED tester by wiring two LEDs to a mains plug and then plug it into the inverter.  One LED represents
the Live pole/side and the other represents the Netural/lo side.  This helps you diagnose and repair a bad mosfet or driver chip.

For Human Fault prevention/detection - If diagnostics mode is on and  AC mains is detected then firmware will automatically 
assert the STOP and RUN commands automatically so that it should start running as an inverter.

Separate documents will be created that explain the operation of this firmware. Probably more videos. 

In the meantime - If you need help email me!

Best regards,

Daniel G. Ambrose
C/C++ Software Engineer 
Sunset Hills, MO, USA